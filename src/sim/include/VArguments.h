/* -*- C++ -*- */
#ifndef VARGUMENTS_H
#define VARGUMENTS_H

#include "itype.h"

namespace MFM
{
  #define VARGUMENTS_MAX_SIZE 64

  /**
   * A typedef describing a function called when a command line
   * argument does not correspond to an input value.
   */
  typedef void (*VArgumentFunction)(char*);

  /**
   * A class which holds a variable number of command line
   * arguments. This is normally used when a driver needs to have
   * unique command line arguments.
   */
  class VArguments
  {
  private:

    /**
     * The descriptions of each installed command line arguments.
     */
    char* m_descriptions[VARGUMENTS_MAX_SIZE];

    /**
     * The flags of each command line argument, separated by the '|'
     * character. For instance, "-h|--help" would match both "-h" and
     * "--help".
     */
    char* m_filters[VARGUMENTS_MAX_SIZE];

    /**
     * The output values gotten from the command line.
     */
    char* m_values[VARGUMENTS_MAX_SIZE];

    /**
     * Flags which describe whether or not a particular argument needs
     * a following argument or not.
     */
    bool m_argsNeeded[VARGUMENTS_MAX_SIZE];

    /**
     * The functioncs called when a command line flag is encountered.
     */
    VArgumentFunction* m_functions[VARGUMENTS_MAX_SIZE];

    /**
     * The number of arguments that have been registered in this
     * instance of VArguments.
     */
    u32 m_heldArguments;

  public:

    VArguments();

  /**
   * Registers a new command line argument to this VArguments instance.
   *
   * @param description The description of this argument, printed out
   *                    upon displaying this program's usage.
   *
   * @param filter The filter used to differentiate between command
   *               line arguments, separated by the '|' character. For
   *               instance, "-h|--help" matches both "-h" and
   *               "--help".
   *
   * @param func The function called upon encounterin this command
   *             line argument when given by the user. This is called
   *             on the value gotten by the user, unless otherwise
   *             specified.
   *
   * @param runFunc If true, will ask for one command line
   *                argument. If not, will treat as a flag and simply
   *                execute func with NULL as its argument.
   */
  void RegisterArgument(char* description, char* filter, VArgumentFunction* func,
                        bool runFunc);

  /**
   * To be called after all arguments are registered. This will parse
   * all command line arguments given into the internally held format.
   *
   * @param argc The amount of command line arguments in argv.
   *
   * @param argv The command line arguments.
   */
  void Gather(int argc, char** argv);

  /**
   * Retreive a command line argument which has been generated by
   * Gather. If this argument is not found, FAIL(ILLEGAL_ARGUMENT) is
   * invoked.
   *
   * @param argName The name of the argument to retreive from this
   *                VArguments.
   *
   * @returns The value at the specified argument.
   */
  char* Get(char* argName);

  /**
   * Prints all held arguments to stdout. This is called when the
   * default 'help' command line argument is invoked.
   */
  void Usage();
  };
}

#endif /* VARGUMENTS_H */
